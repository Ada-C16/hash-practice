import pytest
from hash_practice.exercises import valid_sudoku

@pytest.mark.skip()
def test_example_in_readme():
    # Arrange
    table = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert valid

@pytest.mark.skip()
def test_an_invalid_example():
  # Arrange
  table = [
    ["8","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"],
  ]

  # Act
  valid = valid_sudoku(table)
  assert not valid

@pytest.mark.skip()
def test_blank_grid():
    # Arrange
    table = [
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert valid

@pytest.mark.skip()
def test_one_number_in_grid():
    # Arrange
    table = [
        [".",".","8",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert valid

@pytest.mark.skip()
def test_two_numbers_in_same_row_in_grid():
    # Arrange
    table = [
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".","7",".",".","7",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert not valid

@pytest.mark.skip()
def test_two_numbers_in_same_col_in_grid():
    # Arrange
    table = [
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".","7",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".","7",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert not valid

@pytest.mark.skip()
def test_two_numbers_in_same_subgrid_in_grid():
    # Arrange
    table = [
        [".",".",".",".","7",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".","7",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]
      ]
    
    # Act
    valid = valid_sudoku(table)

    # Assert
    assert not valid

  